import json
import logging
import re
import hashlib
from datetime import datetime, timedelta, timezone
from difflib import SequenceMatcher
import dateparser
from dateutil import tz as dateutil_tz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.error import TelegramError
from .config import ALLOWED_USER_ID, TZINFO
from .db import (
    add_task, list_inbox, list_open_tasks, list_today,
    mark_done, snooze_task, iso_utc, list_week_tasks, drop_task
)
from .ai import transcribe_ogg_to_text, parse_task
from .metrics import Metrics
from .integrations.sheets import append_reflection
from .integrations.sheets import get_week_tasks_done_last_7d, get_reflections_last_7d
from .ai import get_client
from .config import OPENAI_API_KEY

logger = logging.getLogger(__name__)
metrics = Metrics()

def ensure_allowed(update: Update) -> bool:
    user_id = update.effective_user.id if update.effective_user else 0
    return user_id == ALLOWED_USER_ID

def now_local():
    return datetime.now(TZINFO)

def parse_human_dt(text: str):
    settings = {
        "TIMEZONE": TZINFO.zone,
        "RETURN_AS_TIMEZONE_AWARE": True,
        "PREFER_DATES_FROM": "future",
        "RELATIVE_BASE": now_local()
    }
    return dateparser.parse(text, settings=settings)

def estimate_minutes(title: str) -> int:
    low = ["–ø–æ–∑–≤–æ–Ω", "–∑–≤–æ–Ω–æ–∫", "–ø–∏—Å—å–º–æ", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤", "—Å–æ–∑–≤–æ–Ω", "—Å—á—ë—Ç", "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"]
    mid = ["—Å–æ–±—Ä–∞—Ç—å", "–Ω–∞—Å—Ç—Ä–æ", "–∑–∞–≥—Ä—É–∑", "–æ—Ñ–æ—Ä–º", "–æ–ø–∏—Å", "–¥–æ–∫—É–º–µ–Ω—Ç", "–ø—Ä–æ–≤–µ—Ä"]
    high = ["—Ä–∞–∑—Ä–∞–±–æ—Ç", "–±–æ—Ç", "–ø—Ä–æ–µ–∫—Ç", "–¥–µ–∫–æ–º–ø–æ–∑", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä"]
    t = title.lower()
    if any(k in t for k in high): return 90
    if any(k in t for k in mid):  return 45
    if any(k in t for k in low):  return 15
    return 30

IMPORTANT = [
    "–∫–ª–∏–µ–Ω—Ç","–¥–æ—Ö–æ–¥","–≤—ã—Ä—É—á–∫–∞","—Å—á—ë—Ç","–æ–ø–ª–∞—Ç–∞",
    "–¥–µ—Ç","–∑–¥–æ—Ä–æ–≤","—Å–æ–Ω","–≥–∑—Ç","–±–∞–Ω–∫","–Ω–∞–ª–æ–≥","—é—Ä–∏—Å—Ç","–ª–µ–≥–∞–ª",
    "ai","–±–æ—Ç","horien","–≤–±","–æ–∑–æ–Ω","–ø–æ—Å—Ç–∞–≤–∫–∞","–ª–æ–≥–∏—Å—Ç","oos"
]

def urgency_score(due):
    if not due: return 10.0
    now = now_local()
    delta_h = (due - now).total_seconds() / 3600.0
    if delta_h <= 0: return 100.0
    # 12-—á–∞—Å–æ–≤–∞—è —à–∫–∞–ª–∞
    val = 100.0 * (1.0 / (1.0 + delta_h / 12.0))
    return max(10.0, min(100.0, val))

def importance_boost(title: str) -> float:
    t = title.lower()
    score = 0.0
    for kw in IMPORTANT:
        if kw in t:
            score += 8.0
    if "–ª—è–≥—É—à–∫" in t:
        score += 12.0
    return score

def duration_bonus(minutes_: int) -> float:
    if minutes_ <= 25: return +10.0
    if minutes_ <= 50: return 0.0
    return -10.0

def compute_priority(title: str, due, est_min: int) -> float:
    u = urgency_score(due)
    i = importance_boost(title)
    d = duration_bonus(est_min)
    raw = 0.5*u + 0.4*i + 0.1*(50 + d)
    return max(0.0, min(100.0, raw))

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø DailyPilot ‚Äî –≥–æ–ª–æ—Å ‚Üí –∑–∞–¥–∞—á–∏ ‚Üí –ø–ª–∞–Ω.\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/inbox - –∏–Ω–±–æ–∫—Å\n"
        "/plan - –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/done <id> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/snooze <id> <–≤—Ä–µ–º—è> - –æ—Ç–ª–æ–∂–∏—Ç—å\n"
        "/week - –Ω–µ–¥–µ–ª—è\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç CSV\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/health - –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n"
        "üéô –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.",
        parse_mode=ParseMode.MARKDOWN
    )

async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        text = " ".join(context.args).strip()
        if not text:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add <–∑–∞–¥–∞—á–∞> (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–æ–∫: ¬´—Å–µ–≥–æ–¥–Ω—è 19:00¬ª, ¬´–∑–∞–≤—Ç—Ä–∞¬ª, ¬´—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞¬ª)")
            return
        parsed = parse_task(text)
        due_dt = parse_human_dt(parsed.get("due")) if parsed.get("due") else None
        est = estimate_minutes(parsed["title"])
        pr = compute_priority(parsed["title"], due_dt, est)
        tid = add_task(
            update.effective_chat.id,
            parsed["title"], parsed["description"],
            parsed["context"],
            iso_utc(due_dt), iso_utc(now_local()), pr, est, "text"
        )
        msg = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ #{tid}: *{parsed['title']}*\n"
        if due_dt:
            msg += f"üóì {due_dt.astimezone(TZINFO).strftime('%d.%m %H:%M')}\n"
        msg += f"üìé [{parsed['context']}] ‚Ä¢ ‚è±~{est} –º–∏–Ω ‚Ä¢ ‚ö°{int(pr)}"
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_add: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def msg_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    if not update.message.voice: return
    try:
        await update.message.chat.send_action(ChatAction.TYPING)
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_bytes = await file.download_as_bytearray()
        text = transcribe_ogg_to_text(bytes(ogg_bytes))
        parsed = parse_task(text)
        due_dt = parse_human_dt(parsed.get("due")) if parsed.get("due") else None
        est = estimate_minutes(parsed["title"])
        pr = compute_priority(parsed["title"], due_dt, est)
        tid = add_task(
            update.effective_chat.id,
            parsed["title"], parsed["description"],
            parsed["context"],
            iso_utc(due_dt), iso_utc(now_local()), pr, est, "voice"
        )
        msg = (f"üéô –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: _{text}_\n\n"
               f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ #{tid}: *{parsed['title']}*\n")
        if due_dt:
            msg += f"üóì {due_dt.astimezone(TZINFO).strftime('%d.%m %H:%M')}\n"
        msg += f"üìé [{parsed['context']}] ‚Ä¢ ‚è±~{est} –º–∏–Ω ‚Ä¢ ‚ö°{int(pr)}"
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in msg_voice: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def cmd_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        rows = list_inbox(update.effective_chat.id)
        if not rows:
            await update.message.reply_text("üì• –ò–Ω–±–æ–∫—Å –ø—É—Å—Ç.")
            return
        lines = ["üì• *–ò–Ω–±–æ–∫—Å*:"]
        for r in rows:
            tid, title, ctx, due, pr = r["id"], r["title"], r["context"], r["due_at"], r["priority"]
            lines.append(f"#{tid} ‚Ä¢ {title} ‚Äî [{ctx}] ‚Ä¢ ‚ö°{int(pr)}")
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_inbox: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

def _norm_title(s: str) -> str:
    s = (s or "").strip().lower()
    s = re.sub(r"[^\w\s\-]+", "", s, flags=re.U)   # —É–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏
    s = re.sub(r"\s+", " ", s, flags=re.U)         # —Å—Ö–ª–æ–ø–Ω—É—Ç—å –ø—Ä–æ–±–µ–ª—ã
    repl = {"—Ö–æ—Ä–µ–∏":"—Ö–æ—Ä–∏–µ–Ω", "—Ö–æ—Ä–∏—ç–Ω":"—Ö–æ—Ä–∏–µ–Ω"}   # —á–∞—Å—Ç—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –ø–æ–¥ —Å–µ–±—è
    for k,v in repl.items():
        s = s.replace(k, v)
    return s

def _dedupe_rows(rows, similarity=0.92):
    """
    rows ‚Äî —Å–ø–∏—Å–æ–∫ sqlite Row (—Å –ø–æ–ª—è–º–∏ id,title,context,due_at,priority,est_minutes)
    –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    –ï—Å–ª–∏ –¥–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ¬´–ø–æ—Ö–æ–∂–∏¬ª (SequenceMatcher ‚â• similarity) ‚Äî —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏.
    –í—ã–∂–∏–≤–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ:
      1) –µ—Å—Ç—å due_at –∏ –æ–Ω —Ä–∞–Ω—å—à–µ, –∑–∞—Ç–µ–º
      2) –≤—ã—à–µ priority, –∑–∞—Ç–µ–º
      3) –º–µ–Ω—å—à–µ est_minutes.
    """
    kept = []
    reps = []  # id –¥—É–±–ª–µ–π (–¥–ª—è –∏–Ω—Ñ—ã/–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞–≤—Ç–æ-drop –≤ –±—É–¥—É—â–µ–º)
    def better(a, b):
        # –≤–µ—Ä–Ω—ë—Ç True, –µ—Å–ª–∏ a –ª—É—á—à–µ b
        from datetime import datetime
        def parse_due(x):
            try:
                return datetime.fromisoformat(x["due_at"]) if x["due_at"] else None
            except Exception:
                return None
        ad, bd = parse_due(a), parse_due(b)
        if ad and bd and ad != bd:
            return ad < bd
        if (ad is not None) != (bd is not None):
            return ad is not None
        if int(a["priority"]) != int(b["priority"]):
            return int(a["priority"]) > int(b["priority"])
        return int(a["est_minutes"] or 999) < int(b["est_minutes"] or 999)

    for r in rows:
        tit = r["title"] or ""
        norm = _norm_title(tit)
        placed = False
        for i, k in enumerate(kept):
            kt = k["title"]
            if _norm_title(kt) == norm or SequenceMatcher(None, _norm_title(kt), norm).ratio() >= similarity:
                # –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π
                if better(r, k):
                    reps.append(k["id"])
                    kept[i] = r
                else:
                    reps.append(r["id"])
                placed = True
                break
        if not placed:
            kept.append(r)
    return kept, reps

def _pick_plan(rows):
    # –î–û–ë–ê–í–õ–ï–ù–û: –∞–Ω—Ç–∏–¥—É–±–ª–∏
    rows, _reps = _dedupe_rows(rows)

    if not rows: 
        return [], [], []
    frog = rows[0:1]
    stones = rows[1:4]
    sand = rows[4:]
    return frog, stones, sand

async def cmd_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        now = now_local()
        start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=1)
        rows = list_today(update.effective_chat.id, iso_utc(now), iso_utc(start), iso_utc(end))
        if not rows:
            rows = list_open_tasks(update.effective_chat.id)[:10]
        frog, stones, sand = _pick_plan(rows)
        def fmt(r):
            due_str = ""
            if r["due_at"]:
                from datetime import datetime
                dt = datetime.fromisoformat(r["due_at"]).astimezone(TZINFO)
                due_str = f" ‚Ä¢ üóì {dt.strftime('%H:%M')}"
            return f"#{r['id']} {r['title']} ‚Äî [{r['context']}] ‚Ä¢ ‚ö°{int(r['priority'])} ‚Ä¢ ‚è±~{r['est_minutes']}–º{due_str}"

        out = ["üìÖ *–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*"]
        if frog:
            out.append("\nüê∏ *–õ–Ø–ì–£–®–ö–ê*")
            out += [fmt(x) for x in frog]
        if stones:
            out.append("\n‚óºÔ∏é *–ö–ê–ú–ù–ò*")
            out += [fmt(x) for x in stones]
        if sand:
            out.append("\n‚ñ´Ô∏é *–ü–ï–°–û–ö*")
            out += [fmt(x) for x in sand[:10]]
        await update.message.reply_text("\n".join(out), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_plan: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞.")

async def cmd_plan_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–ª–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-11-05)"""
    if not ensure_allowed(update): return
    try:
        if not context.args:
            await update.message.reply_text(
                "üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/plan_date 2025-11-05`\n"
                "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD (ISO)",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        date_str = context.args[0].strip()
        try:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-11-05)")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        start = datetime.combine(target_date, datetime.min.time()).replace(tzinfo=TZINFO)
        end = start + timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        rows = list_today(update.effective_chat.id, iso_utc(now_local()), iso_utc(start), iso_utc(end))
        if not rows:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
            rows = list_open_tasks(update.effective_chat.id)[:10]
        
        frog, stones, sand = _pick_plan(rows)
        def fmt(r):
            due_str = ""
            if r["due_at"]:
                from datetime import datetime
                dt = datetime.fromisoformat(r["due_at"]).astimezone(TZINFO)
                due_str = f" ‚Ä¢ üóì {dt.strftime('%H:%M')}"
            return f"#{r['id']} {r['title']} ‚Äî [{r['context']}] ‚Ä¢ ‚ö°{int(r['priority'])} ‚Ä¢ ‚è±~{r['est_minutes']}–º{due_str}"

        date_display = target_date.strftime("%d.%m.%Y")
        out = [f"üìÖ *–ü–ª–∞–Ω –Ω–∞ {date_display}*"]
        if frog:
            out.append("\nüê∏ *–õ–Ø–ì–£–®–ö–ê*")
            out += [fmt(x) for x in frog]
        if stones:
            out.append("\n‚óºÔ∏é *–ö–ê–ú–ù–ò*")
            out += [fmt(x) for x in stones]
        if sand:
            out.append("\n‚ñ´Ô∏é *–ü–ï–°–û–ö*")
            out += [fmt(x) for x in sand[:10]]
        
        if not frog and not stones and not sand:
            out.append("\n_–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É._")
        
        await update.message.reply_text("\n".join(out), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_plan_date: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–∞—Ç—É.")

async def cmd_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        if not context.args:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /done <id>")
            return
        try:
            tid = int(context.args[0])
        except ValueError:
            await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        ok = mark_done(update.effective_chat.id, tid)
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ." if ok else "–ù–µ –Ω–∞—à—ë–ª –æ—Ç–∫—Ä—ã—Ç—É—é –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º id.")
    except Exception as e:
        logger.error(f"Error in cmd_done: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

async def cmd_snooze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        if len(context.args) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /snooze <id> <–∫–æ–≥–¥–∞> (–ø—Ä–∏–º–µ—Ä: /snooze 12 –∑–∞–≤—Ç—Ä–∞ 10:00)")
            return
        try:
            tid = int(context.args[0])
        except ValueError:
            await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        when = " ".join(context.args[1:])
        new_due = parse_human_dt(when)
        if not new_due:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ 10:00")
            return
        ok = snooze_task(update.effective_chat.id, tid, iso_utc(new_due))
        await update.message.reply_text("‚è≥ –ü–µ—Ä–µ–Ω—ë—Å." if ok else "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É.")
    except Exception as e:
        logger.error(f"Error in cmd_snooze: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏.")

async def cmd_drop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∞ (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ dropped)"""
    if not ensure_allowed(update): return
    try:
        if not context.args:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /drop <id>")
            return
        try:
            tid = int(context.args[0])
        except ValueError:
            await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        ok = drop_task(update.effective_chat.id, tid)
        await update.message.reply_text("üóë –£–±—Ä–∞–ª –∏–∑ –ø–ª–∞–Ω–∞." if ok else "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É.")
    except Exception as e:
        logger.error(f"Error in cmd_drop: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

async def cmd_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        now = now_local().replace(hour=0, minute=0, second=0, microsecond=0)
        end = now + timedelta(days=7)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ Python
        rows = list_week_tasks(update.effective_chat.id, iso_utc(now), iso_utc(end))
        if not rows:
            await update.message.reply_text("–ù–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
            return
        lines = ["üóì *–ù–µ–¥–µ–ª—è (7 –¥–Ω–µ–π)*"]
        current = ""
        for r in rows:
            from datetime import datetime
            dt = datetime.fromisoformat(r["due_at"]).astimezone(TZINFO)
            day = dt.strftime("%a %d.%m")
            if day != current:
                current = day
                lines.append(f"\n*{day}*")
            lines.append(f"#{r['id']} {r['title']} ‚Äî [{r['context']}] ‚Ä¢ ‚è±~{r['est_minutes']}–º ‚Ä¢ ‚ö°{int(r['priority'])} ‚Ä¢ {dt.strftime('%H:%M')}")
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_week: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")

async def cmd_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    conn = None
    try:
        import csv, io
        from .db import db_connect
        conn = db_connect()
        c = conn.cursor()
        c.execute("SELECT id,title,description,context,due_at,added_at,status,priority,est_minutes,source FROM tasks ORDER BY id;")
        rows = c.fetchall()
        buf = io.StringIO()
        w = csv.writer(buf)
        w.writerow(["id","title","description","context","due_at","added_at","status","priority","est_minutes","source"])
        for r in rows:
            w.writerow([r["id"],r["title"],r["description"],r["context"],r["due_at"],r["added_at"],r["status"],r["priority"],r["est_minutes"],r["source"]])
        await update.message.reply_document(document=buf.getvalue().encode("utf-8"), filename="daily_pilot_export.csv", caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á (CSV)")
    except Exception as e:
        logger.error(f"Error in cmd_export: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        if conn:
            conn.close()

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        stats = metrics.get_stats(update.effective_chat.id)
        if not stats:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        productivity = metrics.get_productivity_score(update.effective_chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
        from .db import db_connect
        conn = db_connect()
        c = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –æ—Ç–∫—Ä—ã—Ç–æ)
        c.execute("""
            SELECT context,
                   SUM(CASE WHEN status='done' THEN 1 ELSE 0 END) as done_count,
                   SUM(CASE WHEN status='open' THEN 1 ELSE 0 END) as open_count,
                   COUNT(*) as total_count
            FROM tasks
            WHERE chat_id=?
            GROUP BY context
            ORDER BY total_count DESC
        """, (update.effective_chat.id,))
        context_stats = c.fetchall()
        conn.close()
        
        lines = ["üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*"]
        lines.append(f"\nüìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}")
        lines.append(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['done_tasks']}")
        lines.append(f"üîÑ –û—Ç–∫—Ä—ã—Ç–æ: {stats['open_tasks']}")
        lines.append(f"‚è∞ –° –¥–µ–¥–ª–∞–π–Ω–æ–º: {stats['tasks_with_deadline']}")
        lines.append(f"üéô –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {stats['voice_tasks']}")
        
        lines.append(f"\nüìà *–ó–∞ –Ω–µ–¥–µ–ª—é*")
        lines.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats['tasks_added_week']}")
        lines.append(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['tasks_done_week']}")
        
        if productivity > 0:
            lines.append(f"\n‚ö° Productivity score: {productivity}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
        if context_stats:
            lines.append(f"\nüéØ *–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º*")
            for ctx_row in context_stats:
                ctx = ctx_row['context'] or '–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'
                done = ctx_row['done_count']
                open_tasks = ctx_row['open_count']
                total = ctx_row['total_count']
                progress_pct = int((done / total * 100)) if total > 0 else 0
                lines.append(f"\n*{ctx}:*")
                lines.append(f"  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done} ({progress_pct}%)")
                lines.append(f"  üîÑ –û—Ç–∫—Ä—ã—Ç–æ: {open_tasks}")
                lines.append(f"  üìä –í—Å–µ–≥–æ: {total}")
        
        lines.append(f"\nüíæ –†–∞–∑–º–µ—Ä –ë–î: {stats['db_size_kb']} –ö–ë")
        
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_stats: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def cmd_health(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        import sys
        import platform
        from .config import DB_PATH
        import os
        
        lines = ["üè• *Health Check*"]
        lines.append(f"\nüêç Python: {sys.version.split()[0]}")
        lines.append(f"üíª OS: {platform.system()}")
        lines.append(f"üìç Timezone: {TZINFO}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        if os.path.exists(DB_PATH):
            db_size = os.path.getsize(DB_PATH)
            lines.append(f"‚úÖ DB: {round(db_size/1024, 1)} –ö–ë")
        else:
            lines.append("‚ùå DB: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
        from .backup import list_backups
        backups = list_backups(1)
        if backups:
            lines.append(f"üíæ Backups: {len(backups)} –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        else:
            lines.append("‚ö†Ô∏è Backups: –Ω–µ—Ç –±—ç–∫–∞–ø–æ–≤")
        
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_health: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è.")

async def cmd_push_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        # import pandas as pd
        from .integrations.sheets import export_week_from_bot_to_sheets
        
        wk_count, days_count = export_week_from_bot_to_sheets()
        await update.message.reply_text(f"‚úÖ –í Sheets –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: Week_Tasks={wk_count}, Days={days_count}")
    except Exception as e:
        logger.error(f"Error in cmd_push_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Sheets: {e}")

async def cmd_pull_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import import_week_from_sheets_to_bot
        
        added = import_week_from_sheets_to_bot()
        await update.message.reply_text(f"‚úÖ –ò–∑ Sheets –ø–æ–¥—Ç—è–Ω—É—Ç–æ –∑–∞–¥–∞—á: {added}")
    except Exception as e:
        logger.error(f"Error in cmd_pull_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Sheets: {e}")

async def cmd_sync_notion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Sheets –∏ —à—å—ë–º –≤ Notion –±–∞–∑—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã IDs)."""
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import _open_sheet, SHEET_WEEK_TASKS, SHEET_DAYS
        from .integrations.notion import push_week_tasks, push_days
        
        sh = _open_sheet()
        wk = sh.worksheet(SHEET_WEEK_TASKS).get_all_records()
        ds = sh.worksheet(SHEET_DAYS).get_all_records()
        t1 = push_week_tasks(wk) if wk else 0
        # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Days
        days_rows = [{"Date": r["Date"], "Day": r["Day"], "Frog": r["Frog"], "Stone1": r["Stone1"], "Stone2": r["Stone2"]} for r in ds]
        t2 = push_days(days_rows) if ds else 0
        await update.message.reply_text(f"‚úÖ –í Notion –¥–æ–±–∞–≤–ª–µ–Ω–æ: Week_Tasks={t1}, Days={t2}")
    except Exception as e:
        logger.error(f"Error in cmd_sync_notion: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Notion: {e}")

async def cmd_generate_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—é –∏–∑ Goals/Projects –≤ Sheets."""
    if not ensure_allowed(update): return
    try:
        from .integrations.planner import generate_week_from_goals
        
        w, d, added = generate_week_from_goals()
        await update.message.reply_text(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–¥–µ–ª—è: Week_Tasks={w}, Days={d}, –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ={added}")
    except Exception as e:
        logger.error(f"Error in cmd_generate_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")

async def cmd_merge_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª–∏—Ç—å —Ç–µ–∫—É—á–∫—É –∏–∑ –±–æ—Ç–∞ –≤ Week_Tasks (–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∫–∞–º–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)"""
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import export_week_from_bot_to_sheets
        
        wk_count, _ = export_week_from_bot_to_sheets()
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—É—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Week_Tasks (Sheets): {wk_count} —Å—Ç—Ä–æ–∫")
    except Exception as e:
        logger.error(f"Error in cmd_merge_inbox: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–ª–∏—è–Ω–∏—è: {e}")

async def cmd_commit_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å Week_Tasks –∏–∑ Sheets –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –ë–î –∑–∞–¥–∞—á (–¥–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏)"""
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import import_week_from_sheets_to_bot
        
        added = import_week_from_sheets_to_bot()
        await update.message.reply_text(f"‚úÖ –ù–µ–¥–µ–ª—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á={added}")
    except Exception as e:
        logger.error(f"Error in cmd_commit_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")

async def cmd_reflect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –∏ –∑–∞–¥–∞—ë—Ç 5 –≤–æ–ø—Ä–æ—Å–æ–≤."""
    if not ensure_allowed(update): return
    # –ü–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω
    now = now_local()
    start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    end = start + timedelta(days=1)
    rows = list_today(update.effective_chat.id, iso_utc(now), iso_utc(start), iso_utc(end))
    if not rows:
        rows = list_open_tasks(update.effective_chat.id)[:10]
    frog, stones, sand = _pick_plan(rows)
    def fmt(r):
        return f"- {r['title']} [{r['context']}]"
    preview = []
    if frog:
        preview.append("üê∏ –õ—è–≥—É—à–∫–∞:\n" + "\n".join(fmt(x) for x in frog))
    if stones:
        preview.append("‚óºÔ∏é –ö–∞–º–Ω–∏:\n" + "\n".join(fmt(x) for x in stones))
    if sand:
        preview.append("‚ñ´Ô∏é –ü–µ—Å–æ–∫:\n" + "\n".join(fmt(x) for x in sand[:5]))

    questions = (
        "ü™û *–†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–Ω—è ‚Äî 5 –≤–æ–ø—Ä–æ—Å–æ–≤:*\n\n"
        "1) –ß—Ç–æ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è? (–≥–ª–∞–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)\n"
        "2) –ß—Ç–æ –Ω–µ —É—Å–ø–µ–ª? (—á—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞)\n"
        "3) –ß—Ç–æ –º–µ—à–∞–ª–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è? (–æ—Ç–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è)\n"
        "4) –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–∞—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤—Ç—Ä–∞?\n"
        "5) –ß—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å –∏–ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å?\n\n"
        "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –ø—è—Ç—å —Å—Ç—Ä–æ–∫ (–ø–æ –æ–¥–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É –≤ —Å—Ç—Ä–æ–∫—É)."
    )
    text = "\n\n".join(preview) + ("\n\n" if preview else "") + questions
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç—ã
    context.user_data["await_reflect"] = True

async def msg_text_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –µ—Å–ª–∏ –∂–¥—ë–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Sheets."""
    if not ensure_allowed(update): return
    if not update.message or not update.message.text:
        return
    if not context.user_data.get("await_reflect"):
        return
    context.user_data["await_reflect"] = False

    lines = [l.strip() for l in update.message.text.splitlines() if l.strip()]
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 5 –æ—Ç–≤–µ—Ç–æ–≤
    while len(lines) < 5:
        lines.append("")
    what_done, what_not_done, what_blocked, main_task_tomorrow, skip_what = lines[:5]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
    # Main_Task - –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    # Skip_What - —á—Ç–æ –≤—ã–∫–∏–Ω—É—Ç—å/–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å
    # Focus_Trap - —á—Ç–æ –º–µ—à–∞–ª–æ (what_blocked) + —á—Ç–æ –Ω–µ —É—Å–ø–µ–ª (what_not_done)
    focus_trap = f"–ù–µ —É—Å–ø–µ–ª: {what_not_done}. –ú–µ—à–∞–ª–æ: {what_blocked}"

    user_label = update.effective_user.username if update.effective_user and update.effective_user.username else str(update.effective_user.id)
    try:
        append_reflection(main_task_tomorrow, skip_what, focus_trap, user_label, bot_id=str(update.effective_user.id))
        await update.message.reply_text("ü™û –†–µ—Ñ–ª–µ–∫—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é: {e}")

async def cmd_ai_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    if not OPENAI_API_KEY:
        await update.message.reply_text("‚ùå –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY.")
        return
    try:
        tasks = get_week_tasks_done_last_7d()
        refl = get_reflections_last_7d()

        def fmt_tasks(xs):
            if not xs: return "(no done tasks)"
            lines = []
            for x in xs:
                lines.append(f"- [{x['Direction']}] {x['Task']} ‚Äî outcome: {x.get('Outcome','')} (progress: {x.get('Progress_%',0)}%)")
            return "\n".join(lines)

        def fmt_refl(xs):
            if not xs: return "(no reflections)"
            lines = []
            for x in xs:
                lines.append(f"- {x['Date']}: Main={x['Main_Task']}; Skip={x['Skip_What']}; Trap={x['Focus_Trap']}")
            return "\n".join(lines)

        prompt = (
            "You are an executive productivity coach. Analyze last week's data and provide insights.\n\n"
            "Done tasks (last 7 days):\n" + fmt_tasks(tasks) + "\n\n"
            "Reflections (last 7 days):\n" + fmt_refl(refl) + "\n\n"
            "Please provide: 1) What worked well and why; 2) Where were problems or repeating patterns; 3) 3‚Äì5 concrete recommendations for the next week."
        )

        client = get_client()
        # try gpt-4, fallback to gpt-3.5-turbo
        content = None
        try:
            r = client.chat.completions.create(
                model="gpt-4o",
                temperature=0.7,
                max_tokens=700,
                messages=[
                    {"role":"system","content":"You analyze productivity and planning logs concisely."},
                    {"role":"user","content":prompt}
                ]
            )
            content = r.choices[0].message.content
        except Exception:
            r = client.chat.completions.create(
                model="gpt-3.5-turbo",
                temperature=0.7,
                max_tokens=700,
                messages=[
                    {"role":"system","content":"You analyze productivity and planning logs concisely."},
                    {"role":"user","content":prompt}
                ]
            )
            content = r.choices[0].message.content

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º, –µ—Å–ª–∏ –ò–ò —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–ª; –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º
        out = content or "(no answer)"
        await update.message.reply_text(
            "‚úÖ –ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ\n" + out,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Error in cmd_ai_review: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")

async def cmd_weekend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        # –î–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π
        tasks = get_week_tasks_done_last_7d()
        refl = get_reflections_last_7d()

        # –ë–∞–ª–∞–Ω—Å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
        by_ctx = {}
        for t in tasks:
            ctx = (t.get("Direction") or "").strip()
            by_ctx[ctx] = by_ctx.get(ctx, 0) + 1
        ctx_lines = [f"- {k}: {v}" for k, v in sorted(by_ctx.items(), key=lambda x: (-x[1], x[0]))]
        if not ctx_lines:
            ctx_lines = ["(no data)"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        from datetime import datetime
        today = datetime.now(TZINFO).strftime("%Y-%m-%d")
        did_reflect_today = any((x.get("Date") or "").startswith(today) for x in refl)

        # AI –æ–±–∑–æ—Ä (–º—è–≥–∫–∏–π fallback)
        ai_block = "(AI review skipped)"
        if OPENAI_API_KEY:
            try:
                def fmt_tasks(xs):
                    if not xs: return "(no done tasks)"
                    return "\n".join([f"- [{x['Direction']}] {x['Task']} ‚Äî outcome: {x.get('Outcome','')} (progress: {x.get('Progress_%',0)}%)" for x in xs])
                def fmt_refl(xs):
                    if not xs: return "(no reflections)"
                    return "\n".join([f"- {x['Date']}: Main={x['Main_Task']}; Skip={x['Skip_What']}; Trap={x['Focus_Trap']}" for x in xs])
                prompt = (
                    "You are an executive productivity coach. Analyze last week's data and provide insights.\n\n"
                    "Done tasks (last 7 days):\n" + fmt_tasks(tasks) + "\n\n"
                    "Reflections (last 7 days):\n" + fmt_refl(refl) + "\n\n"
                    "Please provide: 1) What worked well and why; 2) Where were problems or repeating patterns; 3) 3‚Äì5 concrete recommendations for the next week."
                )
                client = get_client()
                try:
                    r = client.chat.completions.create(
                        model="gpt-4o",
                        temperature=0.7,
                        max_tokens=700,
                        messages=[
                            {"role":"system","content":"You analyze productivity and planning logs concisely."},
                            {"role":"user","content":prompt}
                        ]
                    )
                    ai_block = r.choices[0].message.content
                except Exception:
                    r = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        temperature=0.7,
                        max_tokens=700,
                        messages=[
                            {"role":"system","content":"You analyze productivity and planning logs concisely."},
                            {"role":"user","content":prompt}
                        ]
                    )
                    ai_block = r.choices[0].message.content
            except Exception:
                ai_block = "(AI review unavailable)"

        # –°–±–æ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞
        lines = []
        lines.append("‚úÖ –ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ / ‚ö†Ô∏è –ì–¥–µ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã / üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò")
        lines.append(ai_block)
        lines.append("")
        lines.append("üìä –ë–∞–ª–∞–Ω—Å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º (done –∑–∞ 7 –¥–Ω–µ–π):")
        lines += ctx_lines
        if not did_reflect_today:
            lines.append("")
            lines.append("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ —Å–¥–µ–ª–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /reflect")

        await update.message.reply_text("\n".join(lines), disable_web_page_preview=True)

        # –ø–æ–º–µ—Ç–∏–º —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö
        try:
            from .scheduler import mark_weekend_manual_invoked
            mark_weekend_manual_invoked()
        except Exception:
            pass
    except Exception as e:
        logger.error(f"Error in cmd_weekend: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ weekend-–æ—Ç—á—ë—Ç–∞: {e}")

async def cmd_writeback_ids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import _open_sheet, SHEET_WEEK_TASKS
        from gspread.utils import rowcol_to_a1
        from .db import db_connect

        sh = _open_sheet()
        ws = sh.worksheet(SHEET_WEEK_TASKS)
        header = ws.row_values(1)
        col = {name: (idx+1) for idx, name in enumerate(header)}
        if "Bot_ID" not in col:
            header.append("Bot_ID")
            ws.update_cell(1, len(header), "Bot_ID")
            header = ws.row_values(1)
            col = {name: (idx+1) for idx, name in enumerate(header)}

        rows = ws.get_all_values()[1:]
        if not rows:
            await update.message.reply_text("–ù–µ—Ç —Å—Ç—Ä–æ–∫ –≤ Week_Tasks.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
        conn = db_connect()
        c = conn.cursor()
        c.execute("""
          SELECT id,title,context,due_at FROM tasks
          WHERE status='open'
        """)
        tasks = c.fetchall()
        conn.close()

        def norm(s):
            return " ".join((s or "").strip().lower().replace("—ë","–µ").split())

        # –ò–Ω–¥–µ–∫—Å –ø–æ (context,title,deadline)
        idx = {}
        for t in tasks:
            ctx = norm(t["context"])
            ttl = norm(t["title"])
            ddl = (t["due_at"] or "")[:10]
            idx.setdefault((ctx, ttl, ddl), []).append(t["id"])

        wb = []
        matched = 0
        for r_idx, row in enumerate(rows, start=2):
            title = (row[col["Task"]-1] or "").strip() if "Task" in col else ""
            if not title:
                continue
            if "Bot_ID" in col and (row[col["Bot_ID"]-1] or "").strip():
                continue  # —É–∂–µ –µ—Å—Ç—å
            ctx = norm(row[col["Direction"]-1] if "Direction" in col else "")
            ttl = norm(title)
            ddl = (row[col["Deadline"]-1] or "")[:10] if "Deadline" in col else ""
            key = (ctx, ttl, ddl)
            if key in idx and idx[key]:
                t_id = idx[key].pop(0)
                wb.append({"range": rowcol_to_a1(r_idx, col["Bot_ID"]), "values": [[str(t_id)]]})
                matched += 1

        if wb:
            body = {"valueInputOption": "USER_ENTERED", "data": [{"range": i["range"], "values": i["values"]} for i in wb]}
            ws.spreadsheet.batch_update(body)  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ values_batch_update

        await update.message.reply_text(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ Bot_ID –¥–ª—è {matched} —Å—Ç—Ä–æ–∫.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ writeback: {e}")

async def cmd_calendar_advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI-—Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    if not ensure_allowed(update): return
    await update.message.chat.send_action(ChatAction.TYPING)
    
    try:
        from .integrations.sheets import get_week_tasks_last_14d
        from collections import defaultdict
        from dateutil.parser import isoparse
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 14 –¥–Ω–µ–π
        tasks = get_week_tasks_last_14d()
        
        if not tasks:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        # –ü–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
        by_weekday = defaultdict(int)
        # –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—á–∞—Å—ã)
        by_hour = defaultdict(int)
        # –ü–æ Direction –∏ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
        by_direction_weekday = defaultdict(lambda: defaultdict(int))
        # –ü–æ Direction
        by_direction = defaultdict(int)
        
        weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        for task in tasks:
            direction = task.get("Direction", "Unknown")
            done_at = task.get("Done_At", "")
            deadline = task.get("Deadline", "")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Done_At –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            date_str = done_at if done_at else deadline
            
            if date_str:
                try:
                    dt = isoparse(date_str)
                    weekday_idx = dt.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    weekday_name = weekdays[weekday_idx]
                    
                    by_weekday[weekday_name] += 1
                    by_direction[direction] += 1
                    by_direction_weekday[direction][weekday_name] += 1
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    hour = dt.hour
                    by_hour[hour] += 1
                except Exception:
                    pass
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary_lines = []
        summary_lines.append("üìä –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π:\n")
        
        # –°–∞–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
        if by_weekday:
            summary_lines.append("üìÖ –ó–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
            sorted_weekdays = sorted(by_weekday.items(), key=lambda x: x[1], reverse=True)
            for day, count in sorted_weekdays[:7]:
                summary_lines.append(f"  {day}: {count} –∑–∞–¥–∞—á")
            summary_lines.append("")
        
        # –°–∞–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
        if by_hour:
            summary_lines.append("‚è∞ –ó–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            sorted_hours = sorted(by_hour.items(), key=lambda x: x[1], reverse=True)
            for hour, count in sorted_hours[:5]:
                summary_lines.append(f"  {hour:02d}:00: {count} –∑–∞–¥–∞—á")
            summary_lines.append("")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        if by_direction_weekday:
            summary_lines.append("üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
            for direction in sorted(by_direction.keys()):
                direction_tasks = by_direction_weekday[direction]
                if direction_tasks:
                    summary_lines.append(f"  {direction}:")
                    sorted_days = sorted(direction_tasks.items(), key=lambda x: x[1], reverse=True)
                    for day, count in sorted_days[:3]:
                        summary_lines.append(f"    {day}: {count} –∑–∞–¥–∞—á")
            summary_lines.append("")
        
        summary_text = "\n".join(summary_lines)
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        ai_prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π:

{summary_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å—ã –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á (–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã)?
2. –ö–∞–∫–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –≤ –∫–∞–∫–∏–µ –¥–Ω–∏?
3. –î–∞–π 3-5 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.

–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ."""
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
        if not OPENAI_API_KEY:
            await update.message.reply_text("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω. AI-—Å–æ–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        client = get_client()
        try:
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ—É—á –ø–æ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –¥–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                    {"role": "user", "content": ai_prompt}
                ],
                max_tokens=800,
                temperature=0.7,
            )
            ai_advice = response.choices[0].message.content
        except Exception as openai_e:
            logger.warning(f"GPT-4o failed, trying gpt-3.5-turbo: {openai_e}")
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ—É—á –ø–æ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –¥–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                        {"role": "user", "content": ai_prompt}
                    ],
                    max_tokens=800,
                    temperature=0.7,
                )
                ai_advice = response.choices[0].message.content
            except Exception as e:
                logger.error(f"AI review failed: {e}", exc_info=True)
                ai_advice = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI-—Å–æ–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        result_message = f"üìÖ *–°–æ–≤–µ—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞*\n\n{ai_advice}"
        await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"Error in cmd_calendar_advice: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞: {e}")

async def cmd_can_take(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑—è—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""
    if not ensure_allowed(update): return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    user_input = " ".join(context.args) if context.args else None
    
    if not user_input:
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/can_take –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –±–æ—Ç–∞`\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: `/can_take` –∏ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
        context.user_data['waiting_for_task'] = True
        return
    
    await update.message.chat.send_action(ChatAction.TYPING)
    
    try:
        from .integrations.sheets import get_active_week_tasks
        from .db import db_connect
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î –∏ Week_Tasks
        active_db_tasks = list_open_tasks(update.effective_chat.id)
        active_sheets_tasks = get_active_week_tasks()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        tasks_context = []
        if active_db_tasks:
            tasks_context.append("\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–æ—Ç–∞:")
            for t in active_db_tasks[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10
                tasks_context.append(f"  - #{t['id']}: {t['title']} [{t['context']}] (~{t.get('est_minutes', 0)} –º–∏–Ω)")
        
        if active_sheets_tasks:
            tasks_context.append("\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Week_Tasks:")
            for t in active_sheets_tasks[:10]:
                tasks_context.append(f"  - {t['Task']} [{t['Direction']}] ({t.get('Time_Estimate', '?')})")
        
        tasks_text = "\n".join(tasks_context) if tasks_context else "\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç."
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        prompt = f"""
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.  

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–æ–≤—É—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É:

"{user_input}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –°–µ–π—á–∞—Å –æ–Ω —É–∂–µ –∑–∞–Ω—è—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç 6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Å 8:00 –¥–æ 19:00
- –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–æ–º (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å 20:00 –¥–æ 22:30) –∏ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
- –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–æ—Ç–∞ (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã ‚Äî –æ—Ü–µ–Ω–∏ –∏—Ö —Ç–æ–∂–µ)
- –¢—ã –º–æ–∂–µ—à—å –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–ª—ã–π –æ–ø—ã—Ç GPT: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
{tasks_text}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (–≤ —á–∞—Å–∞—Ö)
2. –†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥—ç—Ç–∞–ø—ã, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤
3. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥:
   - –ú–æ–∂–µ—Ç –ª–∏ –æ–Ω –≤–∑—è—Ç—å –µ—ë –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π?
   - –•–≤–∞—Ç–∏—Ç –ª–∏ —É –Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ (–≤—Ä–µ–º–µ–Ω–∏, —ç–Ω–µ—Ä–≥–∏–∏)?
   - –ï—Å–ª–∏ –¥–∞ ‚Äî —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–Ω–∏ –∏ —á–∞—Å—ã, –∫–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å
   - –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: –æ—Ç–ª–æ–∂–∏—Ç—å / —Å–æ–∫—Ä–∞—Ç–∏—Ç—å / –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å

–í –æ—Ç–≤–µ—Ç–µ:
- –ò—Å–ø–æ–ª—å–∑—É–π Telegram-—Ñ–æ—Ä–º–∞—Ç (—ç–º–æ–¥–∑–∏, –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
- –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ
- –ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—Å—Ç–æ –¥–∞–π –≤–µ—Ä–¥–∏–∫—Ç –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "–≤–∞–∂–Ω–æ", "–∫–ª–∏–µ–Ω—Ç", "–≥–æ—Ä–∏—Ç", —Å—á–∏—Ç–∞–π –∑–∞–¥–∞—á—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥–≤–∏–Ω—É—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üìù **–ó–∞–¥–∞—á–∞:** [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]

‚è±Ô∏è **–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:** ~[X] —á–∞—Å–æ–≤

üîπ **–ü–æ–¥–∑–∞–¥–∞—á–∏:**
- ...
- ...

üìä **–†–µ—Å—É—Ä—Å—ã:**
- –°–≤–æ–±–æ–¥–Ω–æ: ~[X] —á–∞—Å–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
- –ù–∞–≥—Ä—É–∑–∫–∞: —Å—Ä–µ–¥–Ω—è—è / –≤—ã—Å–æ–∫–∞—è / –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è

‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
[–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å. –í—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –≤–µ—á–µ—Ä–∞–º –ü—Ç/–°–±/–í—Å. –ü–æ–¥–≤–∏–Ω—É—Ç—å #122.]

–ò–õ–ò:

‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤.  
–ü—Ä–µ–¥–ª–∞–≥–∞—é: [—Ä–µ—à–µ–Ω–∏–µ]

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–∂—ë—Å—Ç–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏": GPT –±—É–¥–µ—Ç –∂—ë—Å—Ç–∫–æ —Ä–µ–∑–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–ª–∞–±–æ–∑–Ω–∞—á–∏–º—ã—Ö –∑–∞–¥–∞—á.
"""
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
        if not OPENAI_API_KEY:
            await update.message.reply_text("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω. –û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        client = get_client()
        try:
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∑–∞–¥–∞—á–∏ –∏ –¥–∞—ë—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7,
            )
            ai_advice = response.choices[0].message.content
        except Exception as openai_e:
            logger.warning(f"GPT-4o failed, trying gpt-3.5-turbo: {openai_e}")
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∑–∞–¥–∞—á–∏ –∏ –¥–∞—ë—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=1000,
                    temperature=0.7,
                )
                ai_advice = response.choices[0].message.content
            except Exception as e:
                logger.error(f"AI assessment failed: {e}", exc_info=True)
                ai_advice = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º hash –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        task_hash = hashlib.md5(user_input.encode()).hexdigest()[:8]
        context.user_data[f'can_take_task_{task_hash}'] = user_input
        
        # 5. –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω", callback_data=f"can_take_add:{task_hash}"),
                InlineKeyboardButton("‚è∏ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"can_take_snooze:{task_hash}")
            ],
            [
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"can_take_delete:{task_hash}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        result_message = f"üìã *–û—Ü–µ–Ω–∫–∞ –∑–∞–¥–∞—á–∏*\n\n{ai_advice}"
        await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in cmd_can_take: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∑–∞–¥–∞—á–∏: {e}")

async def callback_can_take(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥—ã /can_take"""
    if not ensure_allowed(update): return
    
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data
        if not data.startswith("can_take_"):
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º action –∏ hash –∑–∞–¥–∞—á–∏
        parts = data.split(":", 1)
        if len(parts) < 2:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
            return
        
        action = parts[0].replace("can_take_", "")
        task_hash = parts[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ user_data
        task_text = context.user_data.get(f'can_take_task_{task_hash}', '')
        
        if not task_text:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        if action == "add":
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω
            parsed = parse_task(task_text)
            due_dt = parse_human_dt(parsed.get("due")) if parsed.get("due") else None
            est = estimate_minutes(parsed["title"])
            pr = compute_priority(parsed["title"], due_dt, est)
            
            tid = add_task(
                update.effective_chat.id,
                parsed["title"],
                parsed["description"],
                parsed["context"],
                iso_utc(due_dt) if due_dt else None,
                iso_utc(now_local()),
                pr,
                est,
                "can_take"
            )
            
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω!\n\n"
                f"#{tid}: *{parsed['title']}*\n"
                f"üìé [{parsed['context']}] ‚Ä¢ ‚è±~{est} –º–∏–Ω ‚Ä¢ ‚ö°{int(pr)}",
                parse_mode=ParseMode.MARKDOWN
            )
            
        elif action == "snooze":
            # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å)
            await query.edit_message_text(
                f"‚è∏ –ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add {task_text}` –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë.",
                parse_mode=ParseMode.MARKDOWN
            )
            
        elif action == "delete":
            # –£–¥–∞–ª—è–µ–º (–ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º)
            await query.edit_message_text(
                f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n"
                f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add {task_text}`",
                parse_mode=ParseMode.MARKDOWN
            )
            
    except Exception as e:
        logger.error(f"Error in callback_can_take: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")

async def cmd_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /add /inbox /plan /done /snooze /drop /week /export /stats /health /push_week /pull_week /sync_notion /generate_week /merge_inbox /commit_week /reflect /ai_review /weekend /calendar_advice /can_take")
