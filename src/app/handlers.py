import json
import logging
import re
from datetime import datetime, timedelta, timezone
from difflib import SequenceMatcher
import dateparser
from dateutil import tz as dateutil_tz
from telegram import Update
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from .config import ALLOWED_USER_ID, TZINFO
from .db import (
    add_task, list_inbox, list_open_tasks, list_today,
    mark_done, snooze_task, iso_utc, list_week_tasks, drop_task
)
from .ai import transcribe_ogg_to_text, parse_task
from .metrics import Metrics
from .integrations.sheets import append_reflection

logger = logging.getLogger(__name__)
metrics = Metrics()

def ensure_allowed(update: Update) -> bool:
    user_id = update.effective_user.id if update.effective_user else 0
    return user_id == ALLOWED_USER_ID

def now_local():
    return datetime.now(TZINFO)

def parse_human_dt(text: str):
    settings = {
        "TIMEZONE": TZINFO.zone,
        "RETURN_AS_TIMEZONE_AWARE": True,
        "PREFER_DATES_FROM": "future",
        "RELATIVE_BASE": now_local()
    }
    return dateparser.parse(text, settings=settings)

def estimate_minutes(title: str) -> int:
    low = ["–ø–æ–∑–≤–æ–Ω", "–∑–≤–æ–Ω–æ–∫", "–ø–∏—Å—å–º–æ", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤", "—Å–æ–∑–≤–æ–Ω", "—Å—á—ë—Ç", "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"]
    mid = ["—Å–æ–±—Ä–∞—Ç—å", "–Ω–∞—Å—Ç—Ä–æ", "–∑–∞–≥—Ä—É–∑", "–æ—Ñ–æ—Ä–º", "–æ–ø–∏—Å", "–¥–æ–∫—É–º–µ–Ω—Ç", "–ø—Ä–æ–≤–µ—Ä"]
    high = ["—Ä–∞–∑—Ä–∞–±–æ—Ç", "–±–æ—Ç", "–ø—Ä–æ–µ–∫—Ç", "–¥–µ–∫–æ–º–ø–æ–∑", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä"]
    t = title.lower()
    if any(k in t for k in high): return 90
    if any(k in t for k in mid):  return 45
    if any(k in t for k in low):  return 15
    return 30

IMPORTANT = [
    "–∫–ª–∏–µ–Ω—Ç","–¥–æ—Ö–æ–¥","–≤—ã—Ä—É—á–∫–∞","—Å—á—ë—Ç","–æ–ø–ª–∞—Ç–∞",
    "–¥–µ—Ç","–∑–¥–æ—Ä–æ–≤","—Å–æ–Ω","–≥–∑—Ç","–±–∞–Ω–∫","–Ω–∞–ª–æ–≥","—é—Ä–∏—Å—Ç","–ª–µ–≥–∞–ª",
    "ai","–±–æ—Ç","horien","–≤–±","–æ–∑–æ–Ω","–ø–æ—Å—Ç–∞–≤–∫–∞","–ª–æ–≥–∏—Å—Ç","oos"
]

def urgency_score(due):
    if not due: return 10.0
    now = now_local()
    delta_h = (due - now).total_seconds() / 3600.0
    if delta_h <= 0: return 100.0
    # 12-—á–∞—Å–æ–≤–∞—è —à–∫–∞–ª–∞
    val = 100.0 * (1.0 / (1.0 + delta_h / 12.0))
    return max(10.0, min(100.0, val))

def importance_boost(title: str) -> float:
    t = title.lower()
    score = 0.0
    for kw in IMPORTANT:
        if kw in t:
            score += 8.0
    if "–ª—è–≥—É—à–∫" in t:
        score += 12.0
    return score

def duration_bonus(minutes_: int) -> float:
    if minutes_ <= 25: return +10.0
    if minutes_ <= 50: return 0.0
    return -10.0

def compute_priority(title: str, due, est_min: int) -> float:
    u = urgency_score(due)
    i = importance_boost(title)
    d = duration_bonus(est_min)
    raw = 0.5*u + 0.4*i + 0.1*(50 + d)
    return max(0.0, min(100.0, raw))

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø DailyPilot ‚Äî –≥–æ–ª–æ—Å ‚Üí –∑–∞–¥–∞—á–∏ ‚Üí –ø–ª–∞–Ω.\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/inbox - –∏–Ω–±–æ–∫—Å\n"
        "/plan - –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/done <id> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/snooze <id> <–≤—Ä–µ–º—è> - –æ—Ç–ª–æ–∂–∏—Ç—å\n"
        "/week - –Ω–µ–¥–µ–ª—è\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç CSV\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/health - –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n"
        "üéô –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.",
        parse_mode=ParseMode.MARKDOWN
    )

async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        text = " ".join(context.args).strip()
        if not text:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add <–∑–∞–¥–∞—á–∞> (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–æ–∫: ¬´—Å–µ–≥–æ–¥–Ω—è 19:00¬ª, ¬´–∑–∞–≤—Ç—Ä–∞¬ª, ¬´—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞¬ª)")
            return
        parsed = parse_task(text)
        due_dt = parse_human_dt(parsed.get("due")) if parsed.get("due") else None
        est = estimate_minutes(parsed["title"])
        pr = compute_priority(parsed["title"], due_dt, est)
        tid = add_task(
            update.effective_chat.id,
            parsed["title"], parsed["description"],
            parsed["context"],
            iso_utc(due_dt), iso_utc(now_local()), pr, est, "text"
        )
        msg = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ #{tid}: *{parsed['title']}*\n"
        if due_dt:
            msg += f"üóì {due_dt.astimezone(TZINFO).strftime('%d.%m %H:%M')}\n"
        msg += f"üìé [{parsed['context']}] ‚Ä¢ ‚è±~{est} –º–∏–Ω ‚Ä¢ ‚ö°{int(pr)}"
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_add: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def msg_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    if not update.message.voice: return
    try:
        await update.message.chat.send_action(ChatAction.TYPING)
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_bytes = await file.download_as_bytearray()
        text = transcribe_ogg_to_text(bytes(ogg_bytes))
        parsed = parse_task(text)
        due_dt = parse_human_dt(parsed.get("due")) if parsed.get("due") else None
        est = estimate_minutes(parsed["title"])
        pr = compute_priority(parsed["title"], due_dt, est)
        tid = add_task(
            update.effective_chat.id,
            parsed["title"], parsed["description"],
            parsed["context"],
            iso_utc(due_dt), iso_utc(now_local()), pr, est, "voice"
        )
        msg = (f"üéô –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: _{text}_\n\n"
               f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ #{tid}: *{parsed['title']}*\n")
        if due_dt:
            msg += f"üóì {due_dt.astimezone(TZINFO).strftime('%d.%m %H:%M')}\n"
        msg += f"üìé [{parsed['context']}] ‚Ä¢ ‚è±~{est} –º–∏–Ω ‚Ä¢ ‚ö°{int(pr)}"
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in msg_voice: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def cmd_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        rows = list_inbox(update.effective_chat.id)
        if not rows:
            await update.message.reply_text("üì• –ò–Ω–±–æ–∫—Å –ø—É—Å—Ç.")
            return
        lines = ["üì• *–ò–Ω–±–æ–∫—Å*:"]
        for r in rows:
            tid, title, ctx, due, pr = r["id"], r["title"], r["context"], r["due_at"], r["priority"]
            lines.append(f"#{tid} ‚Ä¢ {title} ‚Äî [{ctx}] ‚Ä¢ ‚ö°{int(pr)}")
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_inbox: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

def _norm_title(s: str) -> str:
    s = (s or "").strip().lower()
    s = re.sub(r"[^\w\s\-]+", "", s, flags=re.U)   # —É–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏
    s = re.sub(r"\s+", " ", s, flags=re.U)         # —Å—Ö–ª–æ–ø–Ω—É—Ç—å –ø—Ä–æ–±–µ–ª—ã
    repl = {"—Ö–æ—Ä–µ–∏":"—Ö–æ—Ä–∏–µ–Ω", "—Ö–æ—Ä–∏—ç–Ω":"—Ö–æ—Ä–∏–µ–Ω"}   # —á–∞—Å—Ç—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –ø–æ–¥ —Å–µ–±—è
    for k,v in repl.items():
        s = s.replace(k, v)
    return s

def _dedupe_rows(rows, similarity=0.92):
    """
    rows ‚Äî —Å–ø–∏—Å–æ–∫ sqlite Row (—Å –ø–æ–ª—è–º–∏ id,title,context,due_at,priority,est_minutes)
    –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    –ï—Å–ª–∏ –¥–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ¬´–ø–æ—Ö–æ–∂–∏¬ª (SequenceMatcher ‚â• similarity) ‚Äî —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏.
    –í—ã–∂–∏–≤–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ:
      1) –µ—Å—Ç—å due_at –∏ –æ–Ω —Ä–∞–Ω—å—à–µ, –∑–∞—Ç–µ–º
      2) –≤—ã—à–µ priority, –∑–∞—Ç–µ–º
      3) –º–µ–Ω—å—à–µ est_minutes.
    """
    kept = []
    reps = []  # id –¥—É–±–ª–µ–π (–¥–ª—è –∏–Ω—Ñ—ã/–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞–≤—Ç–æ-drop –≤ –±—É–¥—É—â–µ–º)
    def better(a, b):
        # –≤–µ—Ä–Ω—ë—Ç True, –µ—Å–ª–∏ a –ª—É—á—à–µ b
        from datetime import datetime
        def parse_due(x):
            try:
                return datetime.fromisoformat(x["due_at"]) if x["due_at"] else None
            except Exception:
                return None
        ad, bd = parse_due(a), parse_due(b)
        if ad and bd and ad != bd:
            return ad < bd
        if (ad is not None) != (bd is not None):
            return ad is not None
        if int(a["priority"]) != int(b["priority"]):
            return int(a["priority"]) > int(b["priority"])
        return int(a["est_minutes"] or 999) < int(b["est_minutes"] or 999)

    for r in rows:
        tit = r["title"] or ""
        norm = _norm_title(tit)
        placed = False
        for i, k in enumerate(kept):
            kt = k["title"]
            if _norm_title(kt) == norm or SequenceMatcher(None, _norm_title(kt), norm).ratio() >= similarity:
                # –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π
                if better(r, k):
                    reps.append(k["id"])
                    kept[i] = r
                else:
                    reps.append(r["id"])
                placed = True
                break
        if not placed:
            kept.append(r)
    return kept, reps

def _pick_plan(rows):
    # –î–û–ë–ê–í–õ–ï–ù–û: –∞–Ω—Ç–∏–¥—É–±–ª–∏
    rows, _reps = _dedupe_rows(rows)

    if not rows: 
        return [], [], []
    frog = rows[0:1]
    stones = rows[1:4]
    sand = rows[4:]
    return frog, stones, sand

async def cmd_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        now = now_local()
        start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=1)
        rows = list_today(update.effective_chat.id, iso_utc(now), iso_utc(start), iso_utc(end))
        if not rows:
            rows = list_open_tasks(update.effective_chat.id)[:10]
        frog, stones, sand = _pick_plan(rows)
        def fmt(r):
            due_str = ""
            if r["due_at"]:
                from datetime import datetime
                dt = datetime.fromisoformat(r["due_at"]).astimezone(TZINFO)
                due_str = f" ‚Ä¢ üóì {dt.strftime('%H:%M')}"
            return f"#{r['id']} {r['title']} ‚Äî [{r['context']}] ‚Ä¢ ‚ö°{int(r['priority'])} ‚Ä¢ ‚è±~{r['est_minutes']}–º{due_str}"

        out = ["üìÖ *–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*"]
        if frog:
            out.append("\nüê∏ *–õ–Ø–ì–£–®–ö–ê*")
            out += [fmt(x) for x in frog]
        if stones:
            out.append("\n‚óºÔ∏é *–ö–ê–ú–ù–ò*")
            out += [fmt(x) for x in stones]
        if sand:
            out.append("\n‚ñ´Ô∏é *–ü–ï–°–û–ö*")
            out += [fmt(x) for x in sand[:10]]
        await update.message.reply_text("\n".join(out), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_plan: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞.")

async def cmd_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        if not context.args:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /done <id>")
            return
        try:
            tid = int(context.args[0])
        except ValueError:
            await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        ok = mark_done(update.effective_chat.id, tid)
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ." if ok else "–ù–µ –Ω–∞—à—ë–ª –æ—Ç–∫—Ä—ã—Ç—É—é –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º id.")
    except Exception as e:
        logger.error(f"Error in cmd_done: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

async def cmd_snooze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        if len(context.args) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /snooze <id> <–∫–æ–≥–¥–∞> (–ø—Ä–∏–º–µ—Ä: /snooze 12 –∑–∞–≤—Ç—Ä–∞ 10:00)")
            return
        try:
            tid = int(context.args[0])
        except ValueError:
            await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        when = " ".join(context.args[1:])
        new_due = parse_human_dt(when)
        if not new_due:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ 10:00")
            return
        ok = snooze_task(update.effective_chat.id, tid, iso_utc(new_due))
        await update.message.reply_text("‚è≥ –ü–µ—Ä–µ–Ω—ë—Å." if ok else "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É.")
    except Exception as e:
        logger.error(f"Error in cmd_snooze: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏.")

async def cmd_drop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∞ (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ dropped)"""
    if not ensure_allowed(update): return
    try:
        if not context.args:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /drop <id>")
            return
        try:
            tid = int(context.args[0])
        except ValueError:
            await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        ok = drop_task(update.effective_chat.id, tid)
        await update.message.reply_text("üóë –£–±—Ä–∞–ª –∏–∑ –ø–ª–∞–Ω–∞." if ok else "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É.")
    except Exception as e:
        logger.error(f"Error in cmd_drop: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

async def cmd_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        now = now_local().replace(hour=0, minute=0, second=0, microsecond=0)
        end = now + timedelta(days=7)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ Python
        rows = list_week_tasks(update.effective_chat.id, iso_utc(now), iso_utc(end))
        if not rows:
            await update.message.reply_text("–ù–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
            return
        lines = ["üóì *–ù–µ–¥–µ–ª—è (7 –¥–Ω–µ–π)*"]
        current = ""
        for r in rows:
            from datetime import datetime
            dt = datetime.fromisoformat(r["due_at"]).astimezone(TZINFO)
            day = dt.strftime("%a %d.%m")
            if day != current:
                current = day
                lines.append(f"\n*{day}*")
            lines.append(f"#{r['id']} {r['title']} ‚Äî [{r['context']}] ‚Ä¢ ‚è±~{r['est_minutes']}–º ‚Ä¢ ‚ö°{int(r['priority'])} ‚Ä¢ {dt.strftime('%H:%M')}")
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_week: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")

async def cmd_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    conn = None
    try:
        import csv, io
        from .db import db_connect
        conn = db_connect()
        c = conn.cursor()
        c.execute("SELECT id,title,description,context,due_at,added_at,status,priority,est_minutes,source FROM tasks ORDER BY id;")
        rows = c.fetchall()
        buf = io.StringIO()
        w = csv.writer(buf)
        w.writerow(["id","title","description","context","due_at","added_at","status","priority","est_minutes","source"])
        for r in rows:
            w.writerow([r["id"],r["title"],r["description"],r["context"],r["due_at"],r["added_at"],r["status"],r["priority"],r["est_minutes"],r["source"]])
        await update.message.reply_document(document=buf.getvalue().encode("utf-8"), filename="daily_pilot_export.csv", caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á (CSV)")
    except Exception as e:
        logger.error(f"Error in cmd_export: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        if conn:
            conn.close()

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        stats = metrics.get_stats(update.effective_chat.id)
        if not stats:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        productivity = metrics.get_productivity_score(update.effective_chat.id)
        
        lines = ["üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*"]
        lines.append(f"\nüìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}")
        lines.append(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['done_tasks']}")
        lines.append(f"üîÑ –û—Ç–∫—Ä—ã—Ç–æ: {stats['open_tasks']}")
        lines.append(f"‚è∞ –° –¥–µ–¥–ª–∞–π–Ω–æ–º: {stats['tasks_with_deadline']}")
        lines.append(f"üéô –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {stats['voice_tasks']}")
        
        lines.append(f"\nüìà *–ó–∞ –Ω–µ–¥–µ–ª—é*")
        lines.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats['tasks_added_week']}")
        lines.append(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['tasks_done_week']}")
        
        if productivity > 0:
            lines.append(f"\n‚ö° Productivity score: {productivity}%")
        
        if stats['top_contexts']:
            lines.append(f"\nüè∑ *–¢–æ–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã*")
            for ctx in stats['top_contexts']:
                lines.append(f"{ctx['context']}: {ctx['count']}")
        
        lines.append(f"\nüíæ –†–∞–∑–º–µ—Ä –ë–î: {stats['db_size_kb']} –ö–ë")
        
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_stats: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def cmd_health(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        import sys
        import platform
        from .config import DB_PATH
        import os
        
        lines = ["üè• *Health Check*"]
        lines.append(f"\nüêç Python: {sys.version.split()[0]}")
        lines.append(f"üíª OS: {platform.system()}")
        lines.append(f"üìç Timezone: {TZINFO}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        if os.path.exists(DB_PATH):
            db_size = os.path.getsize(DB_PATH)
            lines.append(f"‚úÖ DB: {round(db_size/1024, 1)} –ö–ë")
        else:
            lines.append("‚ùå DB: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
        from .backup import list_backups
        backups = list_backups(1)
        if backups:
            lines.append(f"üíæ Backups: {len(backups)} –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        else:
            lines.append("‚ö†Ô∏è Backups: –Ω–µ—Ç –±—ç–∫–∞–ø–æ–≤")
        
        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in cmd_health: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è.")

async def cmd_push_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        # import pandas as pd
        from .integrations.sheets import export_week_from_bot_to_sheets
        
        wk_count, days_count = export_week_from_bot_to_sheets()
        await update.message.reply_text(f"‚úÖ –í Sheets –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: Week_Tasks={wk_count}, Days={days_count}")
    except Exception as e:
        logger.error(f"Error in cmd_push_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Sheets: {e}")

async def cmd_pull_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import import_week_from_sheets_to_bot
        
        added = import_week_from_sheets_to_bot()
        await update.message.reply_text(f"‚úÖ –ò–∑ Sheets –ø–æ–¥—Ç—è–Ω—É—Ç–æ –∑–∞–¥–∞—á: {added}")
    except Exception as e:
        logger.error(f"Error in cmd_pull_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Sheets: {e}")

async def cmd_sync_notion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Sheets –∏ —à—å—ë–º –≤ Notion –±–∞–∑—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã IDs)."""
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import _open_sheet, SHEET_WEEK_TASKS, SHEET_DAYS
        from .integrations.notion import push_week_tasks, push_days
        
        sh = _open_sheet()
        wk = sh.worksheet(SHEET_WEEK_TASKS).get_all_records()
        ds = sh.worksheet(SHEET_DAYS).get_all_records()
        t1 = push_week_tasks(wk) if wk else 0
        # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Days
        days_rows = [{"Date": r["Date"], "Day": r["Day"], "Frog": r["Frog"], "Stone1": r["Stone1"], "Stone2": r["Stone2"]} for r in ds]
        t2 = push_days(days_rows) if ds else 0
        await update.message.reply_text(f"‚úÖ –í Notion –¥–æ–±–∞–≤–ª–µ–Ω–æ: Week_Tasks={t1}, Days={t2}")
    except Exception as e:
        logger.error(f"Error in cmd_sync_notion: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Notion: {e}")

async def cmd_generate_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—é –∏–∑ Goals/Projects –≤ Sheets."""
    if not ensure_allowed(update): return
    try:
        from .integrations.planner import generate_week_from_goals
        
        w, d, added = generate_week_from_goals()
        await update.message.reply_text(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–¥–µ–ª—è: Week_Tasks={w}, Days={d}, –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ={added}")
    except Exception as e:
        logger.error(f"Error in cmd_generate_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")

async def cmd_merge_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª–∏—Ç—å —Ç–µ–∫—É—á–∫—É –∏–∑ –±–æ—Ç–∞ –≤ Week_Tasks (–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∫–∞–º–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)"""
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import export_week_from_bot_to_sheets
        
        wk_count, _ = export_week_from_bot_to_sheets()
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—É—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Week_Tasks (Sheets): {wk_count} —Å—Ç—Ä–æ–∫")
    except Exception as e:
        logger.error(f"Error in cmd_merge_inbox: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–ª–∏—è–Ω–∏—è: {e}")

async def cmd_commit_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å Week_Tasks –∏–∑ Sheets –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –ë–î –∑–∞–¥–∞—á (–¥–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏)"""
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import import_week_from_sheets_to_bot
        
        added = import_week_from_sheets_to_bot()
        await update.message.reply_text(f"‚úÖ –ù–µ–¥–µ–ª—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á={added}")
    except Exception as e:
        logger.error(f"Error in cmd_commit_week: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")

async def cmd_reflect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –∏ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (3 —Å—Ç—Ä–æ–∫–∏)."""
    if not ensure_allowed(update): return
    # –ü–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω
    now = now_local()
    start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    end = start + timedelta(days=1)
    rows = list_today(update.effective_chat.id, iso_utc(now), iso_utc(start), iso_utc(end))
    if not rows:
        rows = list_open_tasks(update.effective_chat.id)[:10]
    frog, stones, sand = _pick_plan(rows)
    def fmt(r):
        return f"- {r['title']} [{r['context']}]"
    preview = []
    if frog:
        preview.append("üê∏ –õ—è–≥—É—à–∫–∞:\n" + "\n".join(fmt(x) for x in frog))
    if stones:
        preview.append("‚óºÔ∏é –ö–∞–º–Ω–∏:\n" + "\n".join(fmt(x) for x in stones))
    if sand:
        preview.append("‚ñ´Ô∏é –ü–µ—Å–æ–∫:\n" + "\n".join(fmt(x) for x in sand[:5]))

    questions = (
        "1) –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–∞—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–µ–≥–æ–¥–Ω—è?\n"
        "2) –ï—Å—Ç—å –ª–∏ –≤ –ø–ª–∞–Ω–µ —Ç–æ, —á—Ç–æ —Å—Ç–æ–∏—Ç –≤—ã–∫–∏–Ω—É—Ç—å –∏–ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å?\n"
        "3) –ß—Ç–æ –º–æ–∂–µ—Ç —Å–±–∏—Ç—å —Ç–≤–æ–π —Ñ–æ–∫—É—Å —Å–µ–≥–æ–¥–Ω—è?\n\n"
        "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É –≤ —Å—Ç—Ä–æ–∫–µ)."
    )
    text = "\n\n".join(preview) + ("\n\n" if preview else "") + questions
    await update.message.reply_text(text)
    # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç—ã
    context.user_data["await_reflect"] = True

async def msg_text_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –µ—Å–ª–∏ –∂–¥—ë–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Sheets."""
    if not ensure_allowed(update): return
    if not update.message or not update.message.text:
        return
    if not context.user_data.get("await_reflect"):
        return
    context.user_data["await_reflect"] = False

    lines = [l.strip() for l in update.message.text.splitlines() if l.strip()]
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 3 –æ—Ç–≤–µ—Ç–æ–≤
    while len(lines) < 3:
        lines.append("")
    main_task, skip_what, focus_trap = lines[:3]

    user_label = update.effective_user.username if update.effective_user and update.effective_user.username else str(update.effective_user.id)
    try:
        append_reflection(main_task, skip_what, focus_trap, user_label, bot_id=str(update.effective_user.id))
        await update.message.reply_text("ü™û –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é: {e}")

async def cmd_writeback_ids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    try:
        from .integrations.sheets import _open_sheet, SHEET_WEEK_TASKS
        from gspread.utils import rowcol_to_a1
        from .db import db_connect

        sh = _open_sheet()
        ws = sh.worksheet(SHEET_WEEK_TASKS)
        header = ws.row_values(1)
        col = {name: (idx+1) for idx, name in enumerate(header)}
        if "Bot_ID" not in col:
            header.append("Bot_ID")
            ws.update_cell(1, len(header), "Bot_ID")
            header = ws.row_values(1)
            col = {name: (idx+1) for idx, name in enumerate(header)}

        rows = ws.get_all_values()[1:]
        if not rows:
            await update.message.reply_text("–ù–µ—Ç —Å—Ç—Ä–æ–∫ –≤ Week_Tasks.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
        conn = db_connect()
        c = conn.cursor()
        c.execute("""
          SELECT id,title,context,due_at FROM tasks
          WHERE status='open'
        """)
        tasks = c.fetchall()
        conn.close()

        def norm(s):
            return " ".join((s or "").strip().lower().replace("—ë","–µ").split())

        # –ò–Ω–¥–µ–∫—Å –ø–æ (context,title,deadline)
        idx = {}
        for t in tasks:
            ctx = norm(t["context"])
            ttl = norm(t["title"])
            ddl = (t["due_at"] or "")[:10]
            idx.setdefault((ctx, ttl, ddl), []).append(t["id"])

        wb = []
        matched = 0
        for r_idx, row in enumerate(rows, start=2):
            title = (row[col["Task"]-1] or "").strip() if "Task" in col else ""
            if not title:
                continue
            if "Bot_ID" in col and (row[col["Bot_ID"]-1] or "").strip():
                continue  # —É–∂–µ –µ—Å—Ç—å
            ctx = norm(row[col["Direction"]-1] if "Direction" in col else "")
            ttl = norm(title)
            ddl = (row[col["Deadline"]-1] or "")[:10] if "Deadline" in col else ""
            key = (ctx, ttl, ddl)
            if key in idx and idx[key]:
                t_id = idx[key].pop(0)
                wb.append({"range": rowcol_to_a1(r_idx, col["Bot_ID"]), "values": [[str(t_id)]]})
                matched += 1

        if wb:
            body = {"valueInputOption": "USER_ENTERED", "data": [{"range": i["range"], "values": i["values"]} for i in wb]}
            ws.spreadsheet.values_batch_update(body)

        await update.message.reply_text(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ Bot_ID –¥–ª—è {matched} —Å—Ç—Ä–æ–∫.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ writeback: {e}")

async def cmd_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_allowed(update): return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /add /inbox /plan /done /snooze /drop /week /export /stats /health /push_week /pull_week /sync_notion /generate_week /merge_inbox /commit_week")
